package edu.utexas.cs.nn.tasks.interactive.breedesizer;

import java.awt.Color;
import java.awt.image.BufferedImage;

import javax.swing.JCheckBox;

import edu.utexas.cs.nn.evolution.genotypes.Genotype;
import edu.utexas.cs.nn.networks.Network;
import edu.utexas.cs.nn.tasks.interactive.InteractiveEvolutionTask;
import edu.utexas.cs.nn.util.graphics.GraphicsUtil;
import edu.utexas.cs.nn.util.sound.MiscSoundUtil;
import edu.utexas.cs.nn.util.sound.SoundAmplitudeArrayManipulator;

public class BreedesizerTask<T extends Network> extends InteractiveEvolutionTask<T> {

	private static final int LENGTH_DEFAULT = 60000; //default length of generated amplitude
	private static final int FREQUENCY_DEFAULT = 440; //default frequency of generated amplitude: A440

	public static final int CPPN_NUM_INPUTS	= 3;
	public static final int CPPN_NUM_OUTPUTS = 1;

	//Indices of inputMultiplier effects
	private static final int TIME_CHECKBOX_INDEX = -25;
	private static final int SINE_OF_TIME_CHECKBOX_INDEX = -26;
	private static final int BIAS_CHECKBOX_INDEX = -27;

	private static final int TIME_INPUT_INDEX = 0;
	private static final int SINE_OF_TIME_INPUT_INDEX = 1;
	private static final int BIAS_INPUT_INDEX = 2;


	public BreedesizerTask() throws IllegalAccessException {
		super();
		//Checkboxes to control if x, y, distance from center, or bias effects appear on the console
		JCheckBox timeEffect = new JCheckBox("Time", true);
		inputMultipliers[TIME_INPUT_INDEX] = 1.0;
		JCheckBox sineOfTimeeffect = new JCheckBox("Sine(time)", true); //no spaces because of scanner in actionPerformed
		inputMultipliers[SINE_OF_TIME_INPUT_INDEX] = 1.0;
		JCheckBox biasEffect = new JCheckBox("Bias", true);
		inputMultipliers[BIAS_INPUT_INDEX] = 1.0;

		timeEffect.setName("" + TIME_CHECKBOX_INDEX);
		sineOfTimeeffect.setName("" + SINE_OF_TIME_CHECKBOX_INDEX);
		biasEffect.setName("" + BIAS_CHECKBOX_INDEX);

		timeEffect.addActionListener(this);
		sineOfTimeeffect.addActionListener(this);
		biasEffect.addActionListener(this);

		timeEffect.setForeground(new Color(0,0,0));
		sineOfTimeeffect.setForeground(new Color(0,0,0));
		biasEffect.setForeground(new Color(0,0,0));

		top.add(timeEffect);
		top.add(sineOfTimeeffect);
		top.add(biasEffect);

	}

	/* Will need method that plays sound when image is clicked. Can call utility methods
	 in edu.utexas.cs.nn.util.sounds to accomplish this, but will have to be differentiated 
	 from Picbreeder because it does not do this.
	 */

	/* After save and setEffectCheckbox are generalized so that they can be applied to both 
	 * Breedesizer and Picbreeder, specified method calls will have to be included here.
	 */

	@Override
	public String[] sensorLabels() {
		return new String[] { "X-coordinate", "Y-coordinate", "distance from center", "bias" }; //TODO: new strings here
	}

	@Override
	public String[] outputLabels() {
		return new String[] { "hue-value", "saturation-value", "brightness-value" }; //TODO: new strings here
	}

	@Override
	protected String getWindowTitle() {
		return "Breedesizer";
	}

	/**
	 * Creates BufferedImage from amplitude generated by network (saved in double array) and plays amplitude generated. 
	 */
	@Override
	protected BufferedImage getButtonImage(Network phenotype, int width, int height, double[] inputMultipliers) {
		double[] amplitude = SoundAmplitudeArrayManipulator.amplitudeGenerator(phenotype, LENGTH_DEFAULT, FREQUENCY_DEFAULT, inputMultipliers);
		BufferedImage wavePlotImage = GraphicsUtil.wavePlotFromDoubleArray(amplitude, height, width);
		return wavePlotImage;
	}

	/**
	 * Plays sound associated with an image when the image is clicked
	 */
	@Override
	protected void additionalButtonClickAction(Genotype<T> individual) {
		Network phenotype = individual.getPhenotype();
		double[] amplitude = SoundAmplitudeArrayManipulator.amplitudeGenerator(phenotype, LENGTH_DEFAULT, FREQUENCY_DEFAULT, inputMultipliers);
		MiscSoundUtil.playDoubleArray(amplitude);		
	}
	
	protected void respondToClick(int itemID) {
		super.respondToClick(itemID);
		// Extra checkboxes specific to Picbreeder
		if(itemID == TIME_CHECKBOX_INDEX){ // If X-Effect checkbox is clicked
			setEffectCheckBox(TIME_INPUT_INDEX);
		}else if(itemID == SINE_OF_TIME_CHECKBOX_INDEX){ // If Y-Effect checkbox is clicked
			setEffectCheckBox(SINE_OF_TIME_INPUT_INDEX);
		}else if(itemID == BIAS_CHECKBOX_INDEX){ // If Center-Distance Effect checkbox is clicked
			setEffectCheckBox(BIAS_INPUT_INDEX);
		} 
	}

	@Override
	protected void save(int i) {
		throw new UnsupportedOperationException();		
	}

}
